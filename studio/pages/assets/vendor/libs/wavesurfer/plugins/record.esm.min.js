function t(t,o,a,d){return new(a=a||Promise)(function(e,i){function s(t){try{n(d.next(t))}catch(t){i(t)}}function r(t){try{n(d.throw(t))}catch(t){i(t)}}function n(t){var i;t.done?e(t.value):((i=t.value)instanceof a?i:new a(function(t){t(i)})).then(s,r)}n((d=d.apply(t,o||[])).next())})}class i{constructor(){this.listeners={}}on(t,i,e){if(this.listeners[t]||(this.listeners[t]=new Set),this.listeners[t].add(i),null!=e&&e.once){const e=()=>{this.un(t,e),this.un(t,i)};return this.on(t,e),e}return()=>this.un(t,i)}un(t,i){null!=(t=this.listeners[t])&&t.delete(i)}once(t,i){return this.on(t,i,{once:!0})}unAll(){this.listeners={}}emit(t,...i){this.listeners[t]&&this.listeners[t].forEach(t=>t(...i))}}class e extends i{constructor(t){super(),this.subscriptions=[],this.options=t}onInit(){}_init(t){this.wavesurfer=t,this.onInit()}destroy(){this.emit("destroy"),this.subscriptions.forEach(t=>t())}}class s extends i{constructor(){super(...arguments),this.unsubscribe=()=>{}}start(){this.unsubscribe=this.on("tick",()=>{requestAnimationFrame(()=>{this.emit("tick")})}),this.emit("tick")}stop(){this.unsubscribe()}destroy(){this.unsubscribe()}}const r=["audio/webm","audio/wav","audio/mpeg","audio/mp4","audio/mp3"];class o extends e{constructor(t){var i;super(Object.assign(Object.assign({},t),{audioBitsPerSecond:null!=(i=t.audioBitsPerSecond)?i:128e3,scrollingWaveform:null!=(i=t.scrollingWaveform)&&i,scrollingWaveformWindow:null!=(i=t.scrollingWaveformWindow)?i:5,renderRecordedAudio:null==(i=t.renderRecordedAudio)||i})),this.stream=null,this.mediaRecorder=null,this.dataWindow=null,this.isWaveformPaused=!1,this.lastStartTime=0,this.lastDuration=0,this.duration=0,this.timer=new s,this.subscriptions.push(this.timer.on("tick",()=>{var t=performance.now()-this.lastStartTime;this.duration=this.isPaused()?this.duration:this.lastDuration+t,this.emit("record-progress",this.duration)}))}static create(t){return new o(t||{})}renderMicStream(t){const i=new AudioContext,e=i.createMediaStreamSource(t),s=i.createAnalyser(),r=(e.connect(s),s.frequencyBinCount),n=new Float32Array(r);let o;const a=Math.floor((this.options.scrollingWaveformWindow||0)*i.sampleRate),d=()=>{var t,i;if(this.isWaveformPaused)o=requestAnimationFrame(d);else{if(s.getFloatTimeDomainData(n),this.options.scrollingWaveform){const t=Math.min(a,this.dataWindow?this.dataWindow.length+r:r),e=new Float32Array(a);this.dataWindow&&(i=Math.max(0,a-this.dataWindow.length),e.set(this.dataWindow.slice(-t+r),i)),e.set(n,a-r),this.dataWindow=e}else this.dataWindow=n;const e=this.options.scrollingWaveformWindow;this.wavesurfer&&(null==(t=this.originalOptions)&&(this.originalOptions={cursorWidth:this.wavesurfer.options.cursorWidth,interact:this.wavesurfer.options.interact}),this.wavesurfer.options.cursorWidth=0,this.wavesurfer.options.interact=!1,this.wavesurfer.load("",[this.dataWindow],e)),o=requestAnimationFrame(d)}};return d(),{onDestroy:()=>{cancelAnimationFrame(o),null!=e&&e.disconnect(),null!=i&&i.close()},onEnd:()=>{this.isWaveformPaused=!0,cancelAnimationFrame(o),this.stopMic()}}}startMic(s){return t(this,void 0,void 0,function*(){let t;try{t=yield navigator.mediaDevices.getUserMedia({audio:!(null!=s&&s.deviceId)||{deviceId:s.deviceId}})}catch(t){throw new Error("Error accessing the microphone: "+t.message)}var{onDestroy:i,onEnd:e}=this.renderMicStream(t);return this.subscriptions.push(this.once("destroy",i)),this.subscriptions.push(this.once("record-end",e)),this.stream=t})}stopMic(){this.stream&&(this.stream.getTracks().forEach(t=>t.stop()),this.stream=null,this.mediaRecorder=null)}startRecording(n){return t(this,void 0,void 0,function*(){var t=this.stream||(yield this.startMic(n));this.dataWindow=null;const e=this.mediaRecorder||new MediaRecorder(t,{mimeType:this.options.mimeType||r.find(t=>MediaRecorder.isTypeSupported(t)),audioBitsPerSecond:this.options.audioBitsPerSecond}),s=(this.mediaRecorder=e,this.stopRecording(),[]),i=(e.ondataavailable=t=>{0<t.data.size&&s.push(t.data)},t=>{var i=new Blob(s,{type:e.mimeType});this.emit(t,i),this.options.renderRecordedAudio&&(this.applyOriginalOptionsIfNeeded(),null!=(t=this.wavesurfer)&&t.load(URL.createObjectURL(i)))});e.onpause=()=>i("record-pause"),e.onstop=()=>i("record-end"),e.start(),this.lastStartTime=performance.now(),this.lastDuration=0,this.duration=0,this.isWaveformPaused=!1,this.timer.start(),this.emit("record-start")})}getDuration(){return this.duration}isRecording(){var t;return"recording"===(null==(t=this.mediaRecorder)?void 0:t.state)}isPaused(){var t;return"paused"===(null==(t=this.mediaRecorder)?void 0:t.state)}isActive(){var t;return"inactive"!==(null==(t=this.mediaRecorder)?void 0:t.state)}stopRecording(){var t;this.isActive()&&(null!=(t=this.mediaRecorder)&&t.stop(),this.timer.stop())}pauseRecording(){var t;this.isRecording()&&(this.isWaveformPaused=!0,null!=(t=this.mediaRecorder)&&t.requestData(),null!=(t=this.mediaRecorder)&&t.pause(),this.timer.stop(),this.lastDuration=this.duration)}resumeRecording(){var t;this.isPaused()&&(this.isWaveformPaused=!1,null!=(t=this.mediaRecorder)&&t.resume(),this.timer.start(),this.lastStartTime=performance.now(),this.emit("record-resume"))}static getAvailableAudioDevices(){return t(this,void 0,void 0,function*(){return navigator.mediaDevices.enumerateDevices().then(t=>t.filter(t=>"audioinput"===t.kind))})}destroy(){this.applyOriginalOptionsIfNeeded(),super.destroy(),this.stopRecording(),this.stopMic()}applyOriginalOptionsIfNeeded(){this.wavesurfer&&this.originalOptions&&(this.wavesurfer.options.cursorWidth=this.originalOptions.cursorWidth,this.wavesurfer.options.interact=this.originalOptions.interact,delete this.originalOptions)}}export{o as default};